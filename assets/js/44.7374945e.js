(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{455:function(a,s,v){"use strict";v.r(s);var r=v(2),l=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[a._v("#")]),a._v(" Array")]),a._v(" "),s("h3",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),s("ul",[s("li",[a._v("length 数组中元素的个数")]),a._v(" "),s("li",[a._v("constructor：返回对创建对象的数组函数的引用（可以用来判断变量是否为数组）")])]),a._v(" "),s("h3",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[a._v("#")]),a._v(" 方法")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("arr.push();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：向数组末尾追加元素")])]),a._v(" "),s("li",[s("p",[a._v("参数：追加的元素")])]),a._v(" "),s("li",[s("p",[a._v("返回值：修改后的"),s("strong",[a._v("length")]),a._v("值")])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("可以追加多个")]),a._v(" "),s("p",[s("strong",[a._v("会修改原数组")])])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.unshift();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：向数组的开头添加元素")])]),a._v(" "),s("li",[s("p",[a._v("参数：添加的元素")])]),a._v(" "),s("li",[s("p",[a._v("返回值：修改后的"),s("strong",[a._v("length")]),a._v("值")])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("可以追加多个")]),a._v(" "),s("p",[s("strong",[a._v("会修改原数组")])])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.pop();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：删除末尾的元素")])]),a._v(" "),s("li",[s("p",[a._v("参数：无参数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：被删除的元素")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("会修改原数组")])]),a._v(" "),s("p",[a._v("只能删除一个元素")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.shift();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：删除开头的一个元素")])]),a._v(" "),s("li",[s("p",[a._v("参数：无参数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：被删除的元素")])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("同上")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.splice(位置，删除元素的个数，要追加的元素);")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：在数组的任意位置上添加删除")])]),a._v(" "),s("li",[s("p",[a._v("参数：第一个参数：操作的元素的位置")]),a._v(" "),s("p",[a._v("​\t\t\t第二个参数：删除元素的个数")]),a._v(" "),s("p",[a._v("​\t\t\t第三个元素：要追加的元素，可以是多个，所以不止有三个元素")])]),a._v(" "),s("li",[s("p",[a._v("返回值：删除的元素组成的"),s("strong",[a._v("数组")])])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("如果单纯添加元素的时候，第二个单数传0")]),a._v(" "),s("p",[a._v("同时删除和添加，先删除后添加")]),a._v(" "),s("p",[a._v("添加或删除包含第一个参数对应下标的元素")]),a._v(" "),s("p",[s("strong",[a._v("修改原数组")])])])])])]),a._v(" "),s("li",[s("p",[a._v('arr.join(" ");')]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：使用分隔符将数组数据隔开拼接成字符串")])]),a._v(" "),s("li",[s("p",[a._v("参数：分隔符（连接符）")])]),a._v(" "),s("li",[s("p",[a._v("返回值：已经拼接好的字符串")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.slice(截取的起始下标，结束下标)；")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：截取数组")])]),a._v(" "),s("li",[s("p",[a._v("参数：同（）")])]),a._v(" "),s("li",[s("p",[a._v("返回值：截取到的数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("截取时，包含起始下标，不包含结束下标")]),a._v(" "),s("p",[s("strong",[a._v("不修改")]),a._v("原数组")]),a._v(" "),s("p",[a._v("参数可以是是"),s("strong",[a._v("负数")])]),a._v(" "),s("p",[a._v("如果只有一个起始下标参数，代表从起始下标开始截取到最后")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.concat();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：多个数组的连接")])]),a._v(" "),s("li",[s("p",[a._v("参数：拼接的数组")])]),a._v(" "),s("li",[s("p",[a._v("返回值：连接之后的新数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")]),a._v(" "),s("p",[a._v("类似于：arr = [...arr1,...arr2] ------arr = arr1.concat(arr2);")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.indexOf(值)")]),a._v(" "),s("ul",[s("li",[a._v("描述：查找某个值在数组中的"),s("strong",[a._v("第一次")]),a._v("出现的下标")]),a._v(" "),s("li",[a._v("返回值：数据的下标，没有找到返回-1")])])]),a._v(" "),s("li",[s("p",[a._v("arr.lastIndexOf(值)；同上")])]),a._v(" "),s("li",[s("p",[a._v("arr.includes();"),s("strong",[a._v("ES7新加API")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：用于检查数组是否包含某元素")]),a._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var arr = [1,2,{name:"张三"}]\narr.includes(2)     // true\narr.includes(4)     // false\narr.includes({name:"张三"})     // false\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("参数")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("要索引的值")])]),a._v(" "),s("li",[s("p",[a._v("搜索的开始索引")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("['a', 'b', 'c', 'd'].includes('b')         // true\n['a', 'b', 'c', 'd'].includes('b', 1)      // true\n['a', 'b', 'c', 'd'].includes('b', 2)      // false\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("返回值：包含返回true，否则返回false")])]),a._v(" "),s("li",[s("blockquote",[s("ul",[s("li",[a._v("无法检测对象是否存在")]),a._v(" "),s("li",[a._v("假如只想知道某个值是否在数组中而并不关心它的索引位置，建议使用"),s("code",[a._v("includes()")]),a._v("。")])])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.sort()")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：数组的排序")])]),a._v(" "),s("li",[s("p",[a._v("参数：if没有参数，则按照字符的编码开始按顺序排序")]),a._v(" "),s("p",[a._v("​\t\t\tif有参数，参数必须为一个函数（回调函数）回调函数有两个参数，a，b，a-b正序，b-a倒序")])]),a._v(" "),s("li",[s("p",[a._v("返回值：排序之后的数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("修改原数组")])])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.reverse();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：数组倒序，将数组翻转")]),a._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var arr=[1,5,8,6,9,4,2,3];\nconsole.log(arr.reverse());     // (8) [3, 2, 4, 9, 6, 8, 5, 1]\nconsole.log(arr);               // (8) [3, 2, 4, 9, 6, 8, 5, 1]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("返回值：修改后的数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("修改原数组")])])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.forEach();")]),a._v(" "),s("ul",[s("li",[a._v("描述：遍历数组")]),a._v(" "),s("li",[a._v("参数：（val,index）=>{} val:值index:下标")])])]),a._v(" "),s("li",[s("p",[a._v("arr.filter();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：根据回调函数的返回值对元素进行筛选")]),a._v(" "),s("ul",[s("li",[a._v("true：元素保留")]),a._v(" "),s("li",[a._v("false：元素跳过")])])]),a._v(" "),s("li",[s("p",[a._v("参数：回调函数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：筛选之后的数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.map();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：将数组中的所有数据按照条件改变，形成新数组")])]),a._v(" "),s("li",[s("p",[a._v("参数：回调函数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：映射改变之后的数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.some();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：判断 根据回调函数的判断条件来选择真假")])]),a._v(" "),s("li",[s("p",[a._v("参数：回调函数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：只要有一个回调函数返回值是true，最终some结果是true")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")])])])])]),a._v(" "),s("li",[s("p",[a._v("arr.every();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：判断 根据回调函数的判断条件来选择真假(与some比较记忆)")])]),a._v(" "),s("li",[s("p",[a._v("参数：回调函数")])]),a._v(" "),s("li",[s("p",[a._v("返回值：只要有一个回调函数返回值是false，最终every结果是false；")])]),a._v(" "),s("li",[s("blockquote",[s("p",[s("strong",[a._v("不修改")]),a._v("原数组")])])])])]),a._v(" "),s("li",[s("p",[a._v("Array.from();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：用于将两类对象转为真正的数组：类似数组的对象和可遍历的对象（包括 ES6 新增的数据结构 Set 和 Map）")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var a={length:2,0:'aaa',1:'bbb'};  \nArray.from(a);        //['aaa','bbb']\n// 原理：Array.prototype.slice.call(a);\nvar b={length:2};  \nArray.from(b);       //[undefined.undefined]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("Array.of();")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：用于将一组值，转换为数组。")])]),a._v(" "),s("li",[s("p",[a._v("返回值：总是返回参数值组成的数组。如果没有参数，就返回一个空数组。")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Array.of() // []\nArray.of(undefined) // [undefined]\nArray.of(1) // [1]\nArray.of(1, 2) // [1, 2]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("Array.fill()")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。")])]),a._v(" "),s("li",[s("p",[a._v("参数值：")]),a._v(" "),s("ul",[s("li",[a._v("value:用来填充数组元素的值，必填。")]),a._v(" "),s("li",[a._v("start:可选起始索引，默认值为0。")]),a._v(" "),s("li",[a._v("end:可选终止索引，默认值为"),s("code",[a._v("this.length")])])])]),a._v(" "),s("li",[s("p",[a._v("返回值：修改之后的原数组")])]),a._v(" "),s("li",[s("blockquote",[s("p",[a._v("改变原数组")])])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("   // 当传入单个参数的时候，该方法会用该参数的值填充整个数组\n    var arr1 = new Array(5)\n    console.log(arr1.fill(1)); //[1,1,1,1,1]\n    var arr2 = [1, 2, 3, 4]\n    console.log(arr2.fill(0)); //[0,0,0,0]\n  \n    // 当传入两个参数的时候，第一个参数为填充的元素，第二个为填充元素的起始位置\n    var arr3 = [0, 1, 2, 3, 4, 5, 6]\n    console.log(arr3.fill(1, 3)); //[0,1,2,1,1,1,1]\n  \n    // 当传入三个参数的时候，第一个参数为填充的元素，第二个参数和第三个参数分别指填充元素的起始和终止位置，不修改终止位置元素\n    var arr4 = [0, 1, 2, 3, 4, 5]\n    console.log(arr4.fill(1, 3, 5)); //[0,1,2,1,1,5]\n    \n    //如果提供的起始位置或结束位置为负数，则他们会被加上数组的长度来算出最终的位置，例如 起始位置为-1 就相当于array.length-1\n    var arr5 = [0, 1, 2, 3, 4, 5]\n    console.log(arr5.fill(1, -3));//[0,1,2,1,1,1]\n    var arr6 = [0, 1, 2, 3, 4, 5]\n    console.log(arr6.fill(1, 3, -2));//[0,1,2,1,4,5]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("arr.reduce();")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("描述：累加器")])]),a._v(" "),s("li",[s("p",[a._v("参数：")]),a._v(" "),s("ul",[s("li",[a._v("回调函数"),s("code",[a._v("（pre, item, index, arr）=> {}")]),a._v(" "),s("ul",[s("li",[a._v("第一个参数：per\\total 若规定五个参数则第五个为per，若无规定则为数组第一项")]),a._v(" "),s("li",[a._v("第二个参数：item若规定per为数组第一项则item为数组第二项 若设置了第五个参数值 则item为数组第一项")]),a._v(" "),s("li",[a._v("第三个参数：item的索引值")]),a._v(" "),s("li",[a._v("第四个参数：原数组")])])]),a._v(" "),s("li",[s("em",[a._v("initialValue")]),a._v(":初始值")])])]),a._v(" "),s("li",[s("p",[a._v("返回值")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("回调函数的返回值将会作为下次pre值")])]),a._v(" "),s("li",[s("p",[a._v("累加")]),a._v(" "),s("ul",[s("li",[s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" pre "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 累加")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" pre "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 累乘")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" initialValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("整体reduce函数的返回值是最后的pre值，累加结果/累乘结果/。。。")])])])])])])])])}),[],!1,null,null,null);s.default=l.exports}}]);